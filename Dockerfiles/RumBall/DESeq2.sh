#!/bin/bash
cmdname=`basename $0`
function usage()
{
    echo "$cmdname [Options] <inputfile> <num of reps> <groupname> <species>" 1>&2
    echo '   <inputfile>: Prefix of input matrix file' 1>&2
    echo '   <Ddir>: Directory of gene annotation files' 1>&2
    echo '   <num of reps>: Number of replicates (quated by ":")' 1>&2
    echo '   <group name>: Labels of two groups compared (quated by ":")' 1>&2
    echo '   <species>: Species for the GO analysis [Human|Mouse|Rat|Fly|Celegans]' 1>&2
    echo '   Options:' 1>&2
    echo '      -l <float>: log2 fold change threshold (default: 1)' 1>&2
    echo '      -c <int>: Column position for gene symbol (default: 1)' 1>&2
    echo '      -t <float>: FDR threshould for DEG identification (default: 0.05)' 1>&2
    echo '      -n <int>: Number of top-ranked DEGs for GO analysis (default: 500)' 1>&2
    echo '      -k: Supply when the input file is generated by "kallisto_merge.sh" (default: "rsem_merge.sh")' 1>&2
    echo "   Example:" 1>&2
    echo "      $cmdname star/Matrix 2:2 WT:KD Human" 1>&2
}

p=0.05
nGene_GO=500
kallisto="no"
lfc=1
ncolname=1
while getopts l:c:t:n:k option
do
    case ${option} in
        l) lfc=${OPTARG};;
        c) ncolname=${OPTARG};;
        t) p=${OPTARG};;
        n) nGene_GO=${OPTARG};;
        k) kallisto="yes";;
        *)
            usage
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))

if [ $# -ne 4 ]; then
  usage
  exit 1
fi

# Determine if running in Docker/Singularity or a standard environment
# This can be based on environment variables or other indicators
# For example, checking if a specific directory exists
#if [ -d "/work" ]; then
#    FILE_BASE_PATH="/work/"
    #export R_CACHE_DIR = "/work/.cache/"
#else
#    FILE_BASE_PATH=""
#fi
#export FILE_BASE_PATH

#outname=$FILE_BASE_PATH$1
outname=$1
nrep=$2
gname=$3
sp=$4
n1=$(cut -d':' -f1 <<<${n})
n2=$(cut -d':' -f2 <<<${n})

# Database to use for ClusterProfiler
if test $sp = "Human"; then
    orgdb=org.Hs.eg.db
    orggp=hsapiens
elif test $sp = "Mouse"; then
    orgdb=org.Mm.eg.db
    orggp=mmusculus
elif test $sp = "Rat"; then
    orgdb=org.Rn.eg.db
    orggp=rnorvegicus
elif test $sp = "Fly"; then
    orgdb=org.Dm.eg.db
    orggp=dmelanogaster
elif test $sp = "Celegans"; then
     orgdb=org.Ce.eg.db
     orggp=celegans
else
    echo "[Note] Species $sp is not included in [Human|Mouse|Rat|Fly|Celegans]. GO analysis will be skipped."
fi


Rdir=$(cd $(dirname $0) && pwd)
R="Rscript $Rdir/DESeq2.R"

ex(){ echo $1; eval $1; }

create_xlsx(){
    post=$1

    for ty in DEGs upDEGs downDEGs; do
        head=$outname.$post.DESeq2.$ty
        ncol=`head -n1 $head.tsv | awk '{print NF}'`
        n1=$((ncol-5))
        n2=$((ncol-4))
        n3=$((ncol-3))
        n4=$((ncol-2))
        n5=$((ncol-1))
        cut -f$n1,$n3,$n4 $head.tsv | grep -v chromosome > $head.bed
        grep -v chromosome $head.tsv | awk 'BEGIN { OFS="\t" } {print $'$n1', $'$n3', $'$n4', $2, $'$n5', $'$n2' }' > $head.bed6
    done
}

run_clusterProfiler(){
    ty=$1
    post=$2
    
    ifile=$outname.$post.DESeq2.$ty.tsv
    n=`wc -l $ifile | cut -f1 -d " "`
    if test "$orgdb" != ""; then
        Rscript $Rdir/run_clusterProfiler.R \
                -i=$ifile -n=$nGene_GO -orgdb=$orgdb \
                -o=$outname.$post.DESeq2.GO.clusterProfiler.$ty \
                -tool=deseq2
    fi
}


if test $kallisto = "yes"; then
    echo "execute the differential analysis for kallisto.."

    ### Gene
    for genetype in all pc; do
        postfix=genes.count.$genetype.annotated
        ex "$R -i=$outname.$postfix.tsv -n=$nrep -gname=$gname -o=$outname.$postfix -p=$p -nrowname=2 -ncolskip=1 -s=$sp -lfcthre=$lfc -ncolname=$ncolname"

        create_xlsx $postfix
        s=""
        for ty in all DEGs upDEGs downDEGs; do
            head=$outname.$postfix.DESeq2.$ty
            s="$s -i $head.tsv -n fitted-genes-$ty"
        done
        csv2xlsx.pl $s -o $outname.$postfix.DESeq2.xlsx

        for ty in DEGs upDEGs downDEGs; do
            run_clusterProfiler $ty $postfix
        done
    done

    ### Transcript
    postfix=transcript.count
    ex "$R -i=$outname.$postfix.tsv -n=$nrep -gname=$gname -o=$outname.$postfix -p=$p -nrowname=2 -ncolskip=1 -s=$sp -lfcthre=$lfc -ncolname=$ncolname -noannotation"
    create_xlsx $postfix
    s=""
    for ty in all DEGs upDEGs downDEGs; do
        head=$outname.$postfix.DESeq2.$ty
        s="$s -i $head.tsv -n fitted-transcript-$ty"
    done
    csv2xlsx.pl $s -o $outname.$postfix.DESeq2.xlsx
else
    echo "execute the differential analysis for RSEM.."
    postfix=count
    ex "$R -i=$outname.genes.$postfix.txt    -n=$nrep -gname=$gname -o=$outname.genes.$postfix    -p=$p -nrowname=2 -ncolskip=1 -s=$sp -lfcthre=$lfc -ncolname=$ncolname"
    ex "$R -i=$outname.isoforms.$postfix.txt -n=$nrep -gname=$gname -o=$outname.isoforms.$postfix -p=$p -nrowname=2 -ncolskip=1 -s=$sp -lfcthre=$lfc -ncolname=$ncolname"

    for genetype in genes isoforms; do
        create_xlsx $genetype.$postfix
        s=""
        for gty in all DEGs upDEGs downDEGs; do
            head=$outname.$genetype.$postfix.DESeq2.$gty
            s="$s -i $head.tsv -n fitted-$genetype-$gty"
        done
        csv2xlsx.pl $s -o $outname.$genetype.$postfix.DESeq2.xlsx
    done

    for genetype in DEGs upDEGs downDEGs; do
        run_clusterProfiler $genetype genes.$postfix
    done
    
    if test "$orggp" != ""; then
        head=$outname.genes.$postfix.DESeq2
        n1=`wc -l $head.upDEGs.tsv   | cut -f1 -d " "`
        n2=`wc -l $head.downDEGs.tsv | cut -f1 -d " "`
        if test $n1 -gt 1 && test $n2 -gt 1; then
            Rscript $Rdir/run_gprofiler2.R -i_up=$head.upDEGs.tsv -i_down=$head.downDEGs.tsv \
                    -n=$nGene_GO -org=$orggp -o=$head.GO.gProfiler2 \
                    -tool=deseq2
        fi
    fi
fi

